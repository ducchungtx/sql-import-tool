import click
import os
from src.database.importer import SQLImporter
from src.database.connection import DatabaseConnection

@click.group()
def cli():
    """SQL Import Tool - C√¥ng c·ª• import database MySQL"""
    pass

@cli.command()
@click.option('--config', '-c', help='ƒê∆∞·ªùng d·∫´n ƒë·∫øn file config')
def test_connection(config):
    """Test k·∫øt n·ªëi ƒë·∫øn database"""
    db = DatabaseConnection(config)
    if db.test_connection():
        click.echo("‚úì K·∫øt n·ªëi database th√†nh c√¥ng!")
    else:
        click.echo("‚úó Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn database!")
    db.disconnect()

@cli.command()
@click.argument('sql_file', type=click.Path(exists=True))
@click.option('--config', '-c', help='ƒê∆∞·ªùng d·∫´n ƒë·∫øn file config')
@click.option('--no-split', is_flag=True, help='Kh√¥ng chia nh·ªè file l·ªõn')
def import_sql(sql_file, config, no_split):
    """Import file SQL v√†o database"""
    click.echo(f"ƒêang import file: {sql_file}")

    importer = SQLImporter(config)
    success = importer.import_sql_file(sql_file, split_large_files=not no_split)

    if success:
        click.echo("‚úì Import ho√†n t·∫•t th√†nh c√¥ng!")
    else:
        click.echo("‚úó Import th·∫•t b·∫°i!")

@cli.command()
@click.argument('sql_file', type=click.Path(exists=True))
@click.option('--output-dir', '-o', default='./chunks', help='Th∆∞ m·ª•c output cho c√°c file chunks')
@click.option('--max-size', '-s', default=50, type=float, help='K√≠ch th∆∞·ªõc t·ªëi ƒëa cho m·ªói chunk (MB)')
def split_file(sql_file, output_dir, max_size):
    """Chia nh·ªè file SQL th√†nh nhi·ªÅu file nh·ªè h∆°n"""
    from src.utils.file_splitter import SQLFileSplitter

    splitter = SQLFileSplitter(max_size)
    chunks = splitter.split_sql_file(sql_file, output_dir)

    click.echo(f"‚úì ƒê√£ chia th√†nh {len(chunks)} file:")
    for chunk in chunks:
        click.echo(f"  - {chunk}")

@cli.command()
def help():
    """Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n chi ti·∫øt s·ª≠ d·ª•ng"""
    click.echo("üöÄ SQL Import Tool - H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng")
    click.echo("=" * 50)
    click.echo()
    click.echo("1. Test k·∫øt n·ªëi database:")
    click.echo("   python -m src.main test-connection")
    click.echo()
    click.echo("2. Import file SQL:")
    click.echo("   python -m src.main import-sql my_database.sql")
    click.echo("   python -m src.main import-sql my_database.sql --no-split")
    click.echo()
    click.echo("3. Chia nh·ªè file SQL:")
    click.echo("   python -m src.main split-file my_database.sql")
    click.echo("   python -m src.main split-file my_database.sql -s 30 -o ./chunks")
    click.echo()
    click.echo("üí° Tips:")
    click.echo("   - File > 50MB s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c chia nh·ªè khi import")
    click.echo("   - S·ª≠ d·ª•ng --no-split ƒë·ªÉ b·ªè qua vi·ªác chia file")
    click.echo("   - Config database trong config/database.yaml")
    click.echo()

@cli.command()
@click.argument('sql_file', type=click.Path(exists=True))
def info(sql_file):
    """Hi·ªÉn th·ªã th√¥ng tin file SQL"""
    import os
    from src.utils.file_splitter import SQLFileSplitter

    file_size = os.path.getsize(sql_file)
    file_size_mb = file_size / (1024 * 1024)

    click.echo(f"üìÑ Th√¥ng tin file: {sql_file}")
    click.echo("=" * 50)
    click.echo(f"K√≠ch th∆∞·ªõc: {file_size_mb:.2f} MB ({file_size:,} bytes)")

    # ƒê·∫øm s·ªë d√≤ng
    with open(sql_file, 'r', encoding='utf-8') as f:
        line_count = sum(1 for _ in f)
    click.echo(f"S·ªë d√≤ng: {line_count:,}")

    # ∆Ø·ªõc t√≠nh s·ªë chunks n·∫øu chia
    splitter = SQLFileSplitter(50)
    if file_size > splitter.max_size_bytes:
        estimated_chunks = file_size // splitter.max_size_bytes + 1
        click.echo(f"∆Ø·ªõc t√≠nh s·ªë chunks (50MB): {estimated_chunks}")
    else:
        click.echo("File ƒë·ªß nh·ªè, kh√¥ng c·∫ßn chia")

    # Ki·ªÉm tra encoding
    try:
        with open(sql_file, 'r', encoding='utf-8') as f:
            f.read(100)
        click.echo("Encoding: UTF-8 ‚úì")
    except UnicodeDecodeError:
        click.echo("Encoding: Kh√¥ng ph·∫£i UTF-8 ‚ö†Ô∏è")

    click.echo()

if __name__ == '__main__':
    cli()